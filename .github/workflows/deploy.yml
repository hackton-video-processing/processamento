name: Deploy to Amazon ECS

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: "us-east-1"
  ECR_REPOSITORY: "video-processing-api"
  ECS_SERVICE: "video-processing-api-service"
  ECS_CLUSTER: "video-processing-api"
  ECS_TASK_DEFINITION: ".aws/ecs-task-definition.json"
  CONTAINER_NAME: "video-processing-api"

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Replace environment variables in task definition
        run: |
          sed -i "s|{{ENDPOINT}}|${{ secrets.ENDPOINT }}|g" ${{ env.ECS_TASK_DEFINITION }}
          sed -i "s|{{DBNAME}}|${{ secrets.DBNAME }}|g" ${{ env.ECS_TASK_DEFINITION }}
          sed -i "s|{{MAX_VIDEO_PROCESSING}}|${{ secrets.MAX_VIDEO_PROCESSING }}|g" ${{ env.ECS_TASK_DEFINITION }}
          sed -i "s|{{MYSQL_PORT}}|${{ secrets.MYSQL_PORT }}|g" ${{ env.ECS_TASK_DEFINITION }}
          sed -i "s|{{PASSWORD}}|${{ secrets.PASSWORD }}|g" ${{ env.ECS_TASK_DEFINITION }}
          sed -i "s|{{MYSQL_USER}}|${{ secrets.MYSQL_USER }}|g" ${{ env.ECS_TASK_DEFINITION }}
          sed -i "s|{{AWS_REGION}}|${{ secrets.AWS_REGION }}|g" ${{ env.ECS_TASK_DEFINITION }}
          sed -i "s|{{AWS_ACCESS_KEY_ID}}|${{ secrets.AWS_ACCESS_KEY_ID }}|g" ${{ env.ECS_TASK_DEFINITION }}
          sed -i "s|{{AWS_SECRET_ACCESS_KEY}}|${{ secrets.AWS_SECRET_ACCESS_KEY }}|g" ${{ env.ECS_TASK_DEFINITION }}
          sed -i "s|{{DOWNLOAD_PATH}}|${{ secrets.DOWNLOAD_PATH }}|g" ${{ env.ECS_TASK_DEFINITION }}
          sed -i "s|{{UPLOAD_PATH}}|${{ secrets.UPLOAD_PATH }}|g" ${{ env.ECS_TASK_DEFINITION }}
          sed -i "s|{{S3_BUCKET}}|${{ secrets.S3_BUCKET }}|g" ${{ env.ECS_TASK_DEFINITION }}
          sed -i "s|{{NOTIFICATION_API_BASE_URL}}|${{ secrets.NOTIFICATION_API_BASE_URL }}|g" ${{ env.ECS_TASK_DEFINITION }}
          sed -i "s|{{NOTIFICATION_API_ENDPOINT}}|${{ secrets.NOTIFICATION_API_ENDPOINT }}|g" ${{ env.ECS_TASK_DEFINITION }}

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true